name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: install python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pip install pytest
          pytest
      # - name: push changes to production



  deploy-to-heroku:
    environment:
      name: production
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}


  deploy-to-ubunto-server:
    environment:
      name: production
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: deploy to ubunto server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            cd app/src
            git pull
            echo ${{ secrets.PROD_PASSWORD }} | sudo -S systemctl restart apiAPP
  
  update-docker-image:
    environment:
      name: production
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        # id: buildx
        uses: docker/setup-buildx-action@v1
        # with:
        #   version: v0.7.0
      - name: Build and push
        # id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/social-network-fastapi:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/social-network-fastapi:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/social-network-fastapi:buildcache,mode=max

  notification:
    environment:
      name: production
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [deploy-to-heroku, deploy-to-ubunto-server, update-docker-image]
    steps:
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
        password: ${{secrets.MAIL_PASSWORD}}
        subject: Github Actions ${{ github.workflow }} has ${{ workflow.status }}
        to: yoad787@gmail.com
        from: Github Actions Automation
        secure: true
        body: ${{ github.build }} job has ${{ build.status }} \
              ${{ github.deploy-to-heroku }} job has ${{ deploy-to-heroku.status }} \
             ${{ github.deploy-to-ubunto-server }} job has ${{ deploy-to-ubunto-server.status }} \
             ${{ github.update-docker-image }} job has ${{ update-docker-image.status }} \
        priority: normal