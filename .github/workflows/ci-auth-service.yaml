name: CI Auth_Service And Keycloak

# This workflow is triggered whenever a new PR is created on the main branch,
# And only if ware change in auth_server
on:
  pull_request:
    branches:
      - main
    paths:
      - 'auth_server/**'
  push:
    branches:
      - main
    paths:
      - 'auth_server/**'

jobs:
  tests:
    name: 'Run unit tests'
    environment:
      name: testing  # TODO: add all relevant env to github secret
    defaults:
      run:

        # Define the working directory for all run steps in the workflow
        working-directory: ./auth_server
        shell: bash
    
    env:
      KEYCLOAK_PORT: ${{ secrets.KEYCLOAK_PORT }}
      KEYCLOAK_HOSTNAME: ${{ secrets.KEYCLOAK_HOSTNAME }}
      CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
      ADMIN_CLIENT_SECRET: ${{ secrets.KEYCLOAK_ADMIN_CLIENT_SECRET }}
      REALM: ${{ secrets.KEYCLOAK_REALM }}
      KEYCLOAK_PORT_CALLBACK: ${{ secrets.KEYCLOAK_PORT_CALLBACK }}
      AUTH_SERVER_URL=localhost: ${{ secrets.AUTH_SERVER_URL }}
      LOGIN_URI=http://localhost: ${{ secrets.KEYCLOAK_LOGIN_URI }}
      
      # TODO:
      # add keycloak and postgres_auth envs

    services:
      postgres_auth:
        image: postgres
        env:
          POSTGRES_AUTH_PASSWORD: ${{ secrets.DATABASE_AUTH_PASSWORD }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_AUTH_PASSWORD }}
          POSTGRES_AUTH_DB: ${{ secrets.DATABASE_AUTH_NAME }}_test
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3
        with:
          ref: main
      - name: install python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r ./requirements.txt

      # TODO:
      # create testing for auth service and trun on CI tests
      # - name: test with pytest
      #   run: |
      #     pip install pytest
      #     pytest
  
  # lint:
  #   name: 'Run linter Check'
  #   defaults:
  #     run:
        
  #       # Define the working directory for all run steps in the workflow
  #       working-directory: ./auth_server
  #       shell: bash
    
  #   needs: [tests]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       name: 'Checkout repository'
  #     - name: install python version 3.9
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.9"
  #     - name: flake8 Lint
  #       uses: py-actions/flake8@v2
  #       with:
  #         update-pip: "true"

  CodeQL-analyze:
    name: CodeQL analyze code
    defaults:
      run:
        # Define the working directory for all run steps in the workflow
        working-directory: ./auth_server
        shell: bash
    needs: [tests]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2


  # build-and-push-docker-image:
  #   environment:
  #     name: production
  #   needs: [lint, CodeQL-analyze]
  #   runs-on: ubuntu-latest
  #   # needs: [build, git-guardian-scanning, trufflehog-credential-verification]
  #   steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v3
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Build and push - auth_service
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: "{{defaultContext}}"
  #         file: Dockerfile
  #         builder: ${{ steps.buildx.outputs.name }}
  #         push: true
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/social-network-fastapi-auth_service:latest
  #         cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/social-network-fastapi-auth_service:buildcache
  #         cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/social-network-fastapi-auth_service:buildcache,mode=max
  