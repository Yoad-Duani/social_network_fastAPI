name: CI Terragrunt Tests - TEST - TEST

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - devops_repo/GCP/tg-modules/**
  workflow_dispatch:
    inputs:
      github_environment:
        description: "Github environment for envs and secrets"
        type: environment
        default: "testing"
        required: true
      environment:
        description: "Choose an environment to run tests on"
        required: true
        type: choice
        options:
          - _tests
          - prod
          - dev
      skip_contest:
        description: "skip_contest"
        required: true
        type: boolean
        default: false
      unit_tests:
        description: "Deploy unit tests"
        required: false
        type: boolean
        default: true
      integration_tests:
        description: "Deploy integration tests"
        required: false
        type: boolean
        default: true
      full_deploy_test:
        description: "Full deploy test"
        required: false
        type: boolean
        default: true

concurrency:
  group: tg-test
  cancel-in-progress: false

permissions:
  # create OpenID Connect (OIDC) ID token
  id-token: write
  # allow read repository's content by steps
  contents: read
  # allow adding comments in a Pull Request
  pull-requests: write

env:
  tf_version: "v1.5.2"
  tg_version: "v0.48.0"
  go_version: "1.21.1" # Go (requires version >=1.21.1) for terratest
  working_directory: ./devops_repo/GCP/tg-modules/${{ inputs.environment || '_tests' }}
  #   conftest_version: "0.42.0"
  terratest_dir_unitTests: "./devops_repo/GCP/terratest"
  static_test_job_timeout_minutes: 15
  terratest_unittest_timeout: "60m"

jobs:
  static_test:
    name: "Terragrunt Static Test"
    timeout-minutes: 15
    defaults:
      run:
        shell: bash
    env:
      ENV: ${{ secrets.env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.github_environment }}
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.tg_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Terragrunt init
        uses: ./.github/actions/terragrunt-static-test
        id: tg_init
        with:
          # working_directory: ./devops_repo/GCP/tg-modules/${{ inputs.environment || '_tests' }}
          working_directory: ${{ env.working_directory }}
          google_credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
          # github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: false
          go-version: ${{ env.go_version }}
      - name: Terragrunt Conftest
        if: ${{ inputs.skip_contest == false }}
        uses: ./.github/actions/terragrunt-conftest
        id: tg_conftest
        with:
          working_directory: ${{ env.working_directory }}
      - name: Terragrunt Plan
        working-directory: ${{ env.working_directory }}
        id: tg_plan
        continue-on-error: true
        run: terragrunt run-all plan --terragrunt-non-interactive
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Post Terragrunt plan summary to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 2
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.tg_init.outcome }}\`
            #### Terraform Conftest ü§ñ\`${{ steps.tg_conftest.outcome }}\`
            <details><summary>Conftest Output</summary>

            \`\`\`\n
            ${{ steps.tg_conftest.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.tg_plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  unit_tests:
    if: ${{ inputs.unit_tests == true }}
    name: "Terragrunt Unit Tests"
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    env:
      ENV: ${{ secrets.env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.github_environment }}
    needs: [static_test]
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.tg_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: false
          go-version: ${{ env.go_version }}
      - name: go mod init
        working-directory: ${{ env.terratest_dir_unitTests }}
        run: |
          go mod init github.com/Yoad-Duani/social_network_fastAPI
          go mod tidy
      - name: unit-tests
        working-directory: ${{ env.terratest_dir_unitTests }}
        run: go test -v -count=1 -timeout ${{ env.terratest_unittest_timeout }} -p 1
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TERRAFORM_DIR_ENV: ${{ inputs.environment }}
          UNIT_TESTS_ENABLED: ${{ inputs.unit_tests }}
          INTEGRATION_TESTS_ENABLED: ${{ inputs.integration_tests }}
          FULL_DEPLOY_TEST_ENABLED: ${{ inputs.full_deploy_test }}
