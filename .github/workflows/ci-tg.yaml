name: CI-CD Terraform-Terragrunt

on:
  pull_request:
    types:
      - opened
      # - synchronize
      # - closed
    paths:
      # - 'devops_repo/GCP/tf-modules/**'
      - 'devops_repo/GCP/tg-modules/**'
  push:
    branches:
      - 'main'
    paths:
      # - 'devops_repo/GCP/tf-modules/**'
      - 'devops_repo/GCP/tg-modules/**'

env:
  tf_version: 'v1.4.6'
  tg_version: 'v0.45.11'
  go_version: '1.20'
  conftest_version: '0.42.0'
  # tg_working_dir: 'social_network_fastAPI/devops_repo/GCP/tg-modules/prod/gcp-vpc'

jobs:
  test:
    name: 'Terragrunt Static Test'
    environment:
      name: testing
    defaults:
      run:
        working-directory: ./devops_repo/GCP/tg-modules/dev/gcp-vpc
        shell: bash
    env:
        ENV: ${{ secrets.env }}
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3 # fetches the code for the branch associated with the pull request or the branch being pushed
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.tg_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Interact with Terragrunt
        run: terragrunt --version
      - name: Terragrunt Init
        id: init
        run: terragrunt init --terragrunt-non-interactive
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Terragrunt Validate
        run: terragrunt validate
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: false
          go-version: ${{ env.go_version }}
      - name: Install conftest
        run: |
          go install github.com/open-policy-agent/conftest@v${{ env.conftest_version }}
      - name: test-pwd
        run: pwd
      - name: test-ls
        run: ls -la
      - name: Run conftest Test
        continue-on-error: true
        id: conftest_test
        run: |
          conftest_result_test=$(conftest test --policy ../../../conftest_policies/*.rego . --ignore='\.terragrunt-cache/|terraform\.lock\.hcl' -o github)
          echo "CONFTEST_RESULT_Test=$conftest_result_test" >> $GITHUB_OUTPUT
      - name: Run conftest - Test
        id: conftest-test
        continue-on-error: true
        run: |
          conftest test --policy ../../../conftest_policies/*.rego . --ignore='\.terragrunt-cache/|terraform\.lock\.hcl' --no-fail -o github
      # - name: Run conftest
      #   id: conftest
      #   continue-on-error: true
      #   run: |
      #     EOF_conftest=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "CONFTEST_RESULT<<$EOF_conftest" >> $GITHUB_OUTPUT
      #     conftest test --policy ../../../conftest_policies/*.rego . --ignore='\.terragrunt-cache/|terraform\.lock\.hcl' -o github >> $GITHUB_OUTPUT
      #     echo "$EOF_conftest" >> $GITHUB_OUTPUT
      - name: Update Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        uses: actions/github-script@v5
        # env:
        #   CONFTEST_RESULT_TEST: "terragrunt conftest result test\n${{ env.CONFTEST_RESULT }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 2
          script: |
            const output = `#### Terragrunt Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terragrunt Conftest üìñ\`${{ steps.conftest.outcome }}\``;

            if ("${{ steps.conftest.outcome }}" === "success") {
              output += `

            <details><summary>Show result tests</summary>

            \`\`\`\
            ${{ steps.conftest.outputs.CONFTEST_RESULT_Test }}
            \`\`\`

            </details>`;
            }

            output += `\n\n*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # - name: Install Terraform Compliance
      #   run: |
      #     wget https://github.com/terraform-compliance/cli/releases/latest/download/tfsec-linux-amd64 -O tfsec
      #     chmod +x tfsec
      #     sudo mv tfsec /usr/local/bin
      - name: Terraform Plan Test
        id: tg_plan-test
        continue-on-error: true
        run: terragrunt run-all plan --terragrunt-non-interactive
        working-directory: devops_repo/GCP/tg-modules/dev/gcp-vpc
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      # - name: Terraform Plan
      #   id: tg_plan
      #   continue-on-error: true
      #   run: |
      #     EOF_PLAN=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "PLAN_RESULT<<$EOF_PLAN" >> $GITHUB_OUTPUT
      #     terragrunt run-all plan --terragrunt-non-interactive >> $GITHUB_OUTPUT
      #     echo "$EOF_PLAN" >> $GITHUB_OUTPUT

      #   working-directory: devops_repo/GCP/tg-modules/dev/gcp-vpc
      #   env:
      #     GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
      
      # - name: Terraform Plan
      #   id: tg_plan
      #   continue-on-error: true
      #   run: |
      #     EOF_Plan=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "TG_PLAN<<$EOF_Plan" >> $GITHUB_OUTPUT
      #     terragrunt plan >> $GITHUB_OUTPUT
      #     echo "$EOF_Plan" >> $GITHUB_OUTPUT

      # - name: Find Comment
      #   uses: peter-evans/find-comment@v2
      #   id: fc
      #   with:
      #     issue-number: ${{ github.event.pull_request.number }}
      #     comment-author: 'github-actions[bot]'
      #     body-includes: Build output

      
      # - name: Update Pull Request Comment
      #   uses: actions/github-script@v6
      #   env:
      #     PLAN: "terragrunt\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     retries: 2
      #     script: |
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number
      #       });

      #       const existingComment = comments.find(comment => comment.user.login === 'github-actions[bot]');
      #       const updatedContent = `${existingComment.body}`#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Terragrunt Plan</summary>

      #       \`\`\`\n
      #       ${{ steps.tg_plan.outputs.TG_PLAN }}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;`;

      #       await github.rest.issues.updateComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         comment_id: existingComment.id,
      #         body: updatedContent
      #       });
      

      # works but issue with format
      # - name: Find Comment
      #   uses: peter-evans/find-comment@v2
      #   id: fc
      #   with:
      #     issue-number: ${{ github.event.pull_request.number }}
      #     comment-author: 'github-actions[bot]'
      
      # - name: Create or update comment
      #   uses: peter-evans/create-or-update-comment@v3
      #   with:
      #     comment-id: ${{ steps.fc.outputs.comment-id }}
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body: |
      #       Build output
      #       ${{ steps.tg_plan.outputs.PLAN_RESULT }}
      


      # - name: Update Pull Request - plan
      #   if: ${{ github.event_name == 'pull_request' }}
      #   continue-on-error: true
      #   uses: actions/github-script@v6
      #   # env:
      #   #   CONFTEST_RESULT_TEST: "terragrunt conftest result test\n${{ env.CONFTEST_RESULT }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     retries: 2
      #     script: |
      #       const output = `#### Terragrunt Plan ‚öôÔ∏è\`${{ steps.init.outcome }}\``;

      #       if ("${{ steps.tg_plan.outcome }}" === "success") {
      #         output += `

      #       <details><summary>Show result tests</summary>

      #       \`\`\`\
      #       ${{ steps.tg_plan.outputs.PLAN_RESULT }}
      #       \`\`\`

      #       </details>`;
      #       }

      #       output += `\n\n*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      
      
      
      
      
      # - name: Update Pull Request Comment
      #   if: ${{ github.event_name == 'pull_request' }}
      #   uses: peter-evans/create-or-update-comment@v3
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     comment-id: ${{ github.event.comment.id }}
      #     edit-mode: append
      #     body: |

      #       const output = `#### Terragrunt Plan H\`${{ steps.init.outcome }}\`

      #       <details><summary>Show Terragrunt Plan</summary>

      #       \`\`\`\n
      #       ${{ steps.tg_plan.outputs.TG_PLAN }}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;


      # - name: Terragrunt Plan - Dry run
      #   run: |
      #     terragrunt plan -out=tg.plan
    
        
      
      
      
      
      





      # - name: 'Terragrunt Format'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_binary: 'terraform'
      #     tf_actions_subcommand: 'fmt'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true  # used to post comments to pull requests
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: 'Terragrunt Init'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_subcommand: 'init'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: 'Terragrunt Validate'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_binary: 'terraform'
      #     tf_actions_subcommand: 'validate'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      


      # - name: install python version 3.9
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: "3.9"
  







  # build:
  #   needs: [tests]
  #   if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true || github.event_name == 'push' && github.ref == 'refs/heads/main' }}
  #   name: 'Build Terragrunt state'
  #   environment:
  #     name: testing
  #   defaults:
  #     run:
  #       working-directory: ./devops_repo/GCP
  #       shell: bash
  #   env:
  #       ENV: ${{ secrets.env }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: pulling git repo
  #       uses: actions/checkout@v3
  #       with:
  #         ref: main
  #     - name: Deploy
  #       run: |
      