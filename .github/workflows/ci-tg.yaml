name: CI-CD Terraform-Terragrunt

on:
  pull_request:
    types:
      - opened
      # - synchronize
      # - closed
    paths:
      # - 'devops_repo/GCP/tf-modules/**'
      - 'devops_repo/GCP/tg-modules/**'
  push:
    branches:
      - 'main'
    paths:
      # - 'devops_repo/GCP/tf-modules/**'
      - 'devops_repo/GCP/tg-modules/**'

env:
  tf_version: 'v1.4.6'
  tg_version: 'v0.45.11'
  go_version: '1.20'
  conftest_version: '0.42.0'
  # tg_working_dir: 'social_network_fastAPI/devops_repo/GCP/tg-modules/prod/gcp-vpc'

jobs:
  test:
    name: 'Terragrunt Static Test'
    environment:
      name: testing
    defaults:
      run:
        working-directory: ./devops_repo/GCP/tg-modules/prod/gcp-vpc
        shell: bash
    env:
        ENV: ${{ secrets.env }}
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v3 # fetches the code for the branch associated with the pull request or the branch being pushed
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.tg_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Interact with Terragrunt
        run: terragrunt --version
      - name: Terragrunt Init
        id: init
        run: terragrunt init
      - name: Terragrunt Validate
        run: terragrunt validate
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: false
          go-version: ${{ env.go_version }}
      - name: Install conftest
        run: |
          go install github.com/open-policy-agent/conftest@v${{ env.conftest_version }}
      - name: test-pwd
        run: pwd
      - name: test-ls
        run: ls -la
      - name: Run conftest Test
        id: conftest_test
        run: |
          echo "CONFTEST_RESULT=$(conftest test --policy ../../../conftest_policies/*.rego . --ignore='\.terragrunt-cache/|terraform\.lock\.hcl') -o github" >> $GITHUB_OUTPUT
      # - name: Run conftest
      #   id: conftest
      #   continue-on-error: true
      #   run: |
      #     EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "text<<$EOF" >> $GITHUB_OUTPUT
      #     echo "CONFTEST_RESULT=$(conftest test --policy ../../../conftest_policies/*.rego . --ignore='\.terragrunt-cache/|terraform\.lock\.hcl')" >> $GITHUB_OUTPUT
      #     echo "$EOF" >> $GITHUB_OUTPUT
      - name: Update Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: false
        uses: actions/github-script@v6
        # env:
        #   CONFTEST_RESULT_TEST: "terragrunt conftest result test\n${{ env.CONFTEST_RESULT }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 2
          script: |
            const output = `#### Terragrunt Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terragrunt Conftest üìñ\`${{ steps.conftest_test.outcome }}\`

            <details><summary>Show result tests</summary>

            \`\`\`\n
            ${{ steps.conftest_test.outputs.CONFTEST_RESULT }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        
      
      
      
      
      
      
      
      





      # - name: 'Terragrunt Format'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_binary: 'terraform'
      #     tf_actions_subcommand: 'fmt'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true  # used to post comments to pull requests
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: 'Terragrunt Init'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_subcommand: 'init'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: 'Terragrunt Validate'
      #   uses: the-commons-project/terragrunt-github-actions@master
      #   with:
      #     tf_actions_version: ${{ env.tf_version }}
      #     tg_actions_version: ${{ env.tg_version }}
      #     tf_actions_binary: 'terraform'
      #     tf_actions_subcommand: 'validate'
      #     tf_actions_working_dir: ${{ env.tf_working_dir }}
      #     tf_actions_comment: true
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      


      # - name: install python version 3.9
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: "3.9"
  







  # build:
  #   needs: [tests]
  #   if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true || github.event_name == 'push' && github.ref == 'refs/heads/main' }}
  #   name: 'Build Terragrunt state'
  #   environment:
  #     name: testing
  #   defaults:
  #     run:
  #       working-directory: ./devops_repo/GCP
  #       shell: bash
  #   env:
  #       ENV: ${{ secrets.env }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: pulling git repo
  #       uses: actions/checkout@v3
  #       with:
  #         ref: main
  #     - name: Deploy
  #       run: |
      